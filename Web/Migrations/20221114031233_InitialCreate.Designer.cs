// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaMAV.Web.Data;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221114031233_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9250d0a9-2184-4ce1-80ac-73a6d3d811de",
                            Email = "admin@mav.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@MAV.COM",
                            NormalizedUserName = "ADMINISTRADOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7g5Hh0bEetkum/buwj0Y2cRVFHWuUe4UZec+vEugilfLt8KnFaPvpVDlvy8X05iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "OYWWGEEW7PAULQNQAM4DL5FERLEQLEPP",
                            TwoFactorEnabled = false,
                            UserName = "Administrador"
                        },
                        new
                        {
                            Id = "prop",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7513c25-eb2e-4101-9480-57c00b84d1e2",
                            Email = "propietario@mav.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PROPIETARIO@MAV.COM",
                            NormalizedUserName = "PROPIETARIO",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnMEx8PAlltiKgEBDYvgoBQAG/ea2AdmcsjU7sf8tb/gq+tI064hbMkuhXs59a+Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "EQXVLBMZVTIJMWVT6EDOUWZ3YFXA5FIP",
                            TwoFactorEnabled = false,
                            UserName = "Propietario"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            RoleId = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.ItemMantenimiento", b =>
                {
                    b.Property<int>("ItemMantenimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("KilometrosPredeterminado")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TiempoPredeterminado")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemMantenimientoId");

                    b.ToTable("ItemMantenimiento");

                    b.HasData(
                        new
                        {
                            ItemMantenimientoId = 1,
                            Detalle = "Cambio de aceite",
                            KilometrosPredeterminado = 10000,
                            TiempoPredeterminado = 12
                        },
                        new
                        {
                            ItemMantenimientoId = 2,
                            Detalle = "Verificar presión de neumáticos",
                            KilometrosPredeterminado = 2000,
                            TiempoPredeterminado = 2
                        },
                        new
                        {
                            ItemMantenimientoId = 3,
                            Detalle = "Correa de accesorios: sustituir",
                            KilometrosPredeterminado = 50000
                        },
                        new
                        {
                            ItemMantenimientoId = 4,
                            Detalle = "Control de fugas de fluidos"
                        },
                        new
                        {
                            ItemMantenimientoId = 5,
                            Detalle = "Prueba en ruta"
                        },
                        new
                        {
                            ItemMantenimientoId = 6,
                            Detalle = "Sustituir bujías",
                            KilometrosPredeterminado = 30000
                        },
                        new
                        {
                            ItemMantenimientoId = 7,
                            Detalle = "Correa de distribución: inspeccionar"
                        },
                        new
                        {
                            ItemMantenimientoId = 8,
                            Detalle = "Correa de distribución: sustituir",
                            KilometrosPredeterminado = 50000
                        },
                        new
                        {
                            ItemMantenimientoId = 9,
                            Detalle = "Aceite de transmisión"
                        },
                        new
                        {
                            ItemMantenimientoId = 10,
                            Detalle = "Líquido de frenos"
                        },
                        new
                        {
                            ItemMantenimientoId = 11,
                            Detalle = "Fluido de la dirección asistida"
                        },
                        new
                        {
                            ItemMantenimientoId = 12,
                            Detalle = "Pedal de embrague"
                        },
                        new
                        {
                            ItemMantenimientoId = 13,
                            Detalle = "Filtro de aire: inspeccionar"
                        },
                        new
                        {
                            ItemMantenimientoId = 14,
                            Detalle = "Filtro de aire: sustituir"
                        },
                        new
                        {
                            ItemMantenimientoId = 15,
                            Detalle = "Filtro de combustible: sustituir"
                        },
                        new
                        {
                            ItemMantenimientoId = 16,
                            Detalle = "Prefiltro de bomba de combustible"
                        },
                        new
                        {
                            ItemMantenimientoId = 17,
                            Detalle = "Sistema de aire acondicionado"
                        },
                        new
                        {
                            ItemMantenimientoId = 18,
                            Detalle = "Sistema de refrigeración de motor"
                        });
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Marca", b =>
                {
                    b.Property<int>("MarcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("MarcaId");

                    b.ToTable("Marca");

                    b.HasData(
                        new
                        {
                            MarcaId = 1,
                            Activo = true,
                            Detalle = "Ford"
                        },
                        new
                        {
                            MarcaId = 2,
                            Activo = true,
                            Detalle = "Chevrolet"
                        });
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Modelo", b =>
                {
                    b.Property<int>("ModeloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarcaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoUnidadId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ModeloId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("TipoUnidadId");

                    b.ToTable("Modelo");

                    b.HasData(
                        new
                        {
                            ModeloId = 1,
                            Detalle = "Chevrolet Agile",
                            FechaAlta = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MarcaId = 2,
                            TipoUnidadId = 1
                        },
                        new
                        {
                            ModeloId = 2,
                            Detalle = "Ford Fiesta Kinetic Design",
                            FechaAlta = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MarcaId = 1,
                            TipoUnidadId = 1
                        });
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Planilla", b =>
                {
                    b.Property<int>("PlanillaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("AnioFabricacion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(270)");

                    b.Property<int>("ModeloId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanillaId");

                    b.HasIndex("ModeloId");

                    b.ToTable("Planilla");

                    b.HasData(
                        new
                        {
                            PlanillaId = 1,
                            Activo = true,
                            AnioFabricacion = 2015,
                            Detalle = "Chevrolet Agile",
                            ModeloId = 1,
                            Version = 1
                        });
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.PlanillaItem", b =>
                {
                    b.Property<int>("PlanillaItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("InfoExtra")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemMantenimientoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Kilometros")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Meses")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanillaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recomendaciones")
                        .HasColumnType("TEXT");

                    b.HasKey("PlanillaItemId");

                    b.HasIndex("ItemMantenimientoId");

                    b.HasIndex("PlanillaId");

                    b.ToTable("PlanillaItem");

                    b.HasData(
                        new
                        {
                            PlanillaItemId = 1,
                            InfoExtra = "Cambie el aceite del motor y el filtro de aceite conforme a los intervalos de tiempo o kilómetros recorridos, ya que los mismos pierden sus propiedades de lubricación no solo debido al funcionamiento del motor, sino también a su envejecimiento. Verificar el nivel de aceite semanalmente o antes de iniciar un viaje de más de 50 kilómetros. Tener en cuenta que el gasto promedio de aceite es de 0,8 litros cada 1000 km.",
                            ItemMantenimientoId = 1,
                            Kilometros = 10000,
                            Meses = 12,
                            Observaciones = "Cambiar y verificar nivel con el motor a temperatura de operación normal.",
                            PlanillaId = 1,
                            Recomendaciones = "Utilizar aceites Elaion F50 d1 (Dexos 1 API-SN ILSAC GF-5, grado SAE 5W30)."
                        },
                        new
                        {
                            PlanillaItemId = 2,
                            ItemMantenimientoId = 2,
                            Kilometros = 2000,
                            Meses = 2,
                            PlanillaId = 1,
                            Recomendaciones = "No esperar al siguiente servicio. Verificar frecuentemente en estaciones de servicio o talleres especializados en neumáticos."
                        },
                        new
                        {
                            PlanillaItemId = 3,
                            InfoExtra = "Verificar el estado de los tensores.",
                            ItemMantenimientoId = 3,
                            Kilometros = 50000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 4,
                            InfoExtra = "Inspeccionar fugas de aceite, líquido refrigerante, de dirección, de freno, grasa de la caja de cambios y líquido lava-parabrisas.",
                            ItemMantenimientoId = 4,
                            Kilometros = 10000,
                            Meses = 12,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 5,
                            InfoExtra = "Inspeccionar si el vehículo presenta anomalías ocasionales. Realizar una prueba en ruta después de la inspección.",
                            ItemMantenimientoId = 5,
                            Kilometros = 30000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 6,
                            ItemMantenimientoId = 6,
                            Kilometros = 30000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 7,
                            InfoExtra = "Inspeccionar el estado de la correa y del tensor automático.",
                            ItemMantenimientoId = 7,
                            Observaciones = "Primer control a los 20.000 Km, luego cada 50.000 Km.",
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 8,
                            ItemMantenimientoId = 8,
                            Kilometros = 50000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 9,
                            InfoExtra = "Verificar el nivel y sustituir si fuera necesario.",
                            ItemMantenimientoId = 9,
                            Kilometros = 10000,
                            Meses = 12,
                            Observaciones = "Caja de velocidades",
                            PlanillaId = 1,
                            Recomendaciones = "Aceite mineral para cajas de cambios, SAE 75W85, engranajes helicoidales, color rojo."
                        },
                        new
                        {
                            PlanillaItemId = 10,
                            InfoExtra = "Verificar el nivel y completar al nivel si hay fuga. Se debe corregir inmediatamente si hay fuga.",
                            ItemMantenimientoId = 10,
                            Kilometros = 20000,
                            Meses = 24,
                            PlanillaId = 1,
                            Recomendaciones = "Líquido de frenos DOT 4 de ACDelco."
                        },
                        new
                        {
                            PlanillaItemId = 11,
                            InfoExtra = "Verificar el nivel. No requiere cambio, excepto baja del nivel.",
                            ItemMantenimientoId = 11,
                            Kilometros = 10000,
                            PlanillaId = 1,
                            Recomendaciones = "Aceite Dexron II de ACDelco."
                        },
                        new
                        {
                            PlanillaItemId = 12,
                            InfoExtra = "Comprobar el recorrido.",
                            ItemMantenimientoId = 12,
                            Kilometros = 30000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 13,
                            InfoExtra = "Limpiar el filtro si fuera necesario.",
                            ItemMantenimientoId = 13,
                            Observaciones = "Primer control a los 20.000 Km, luego cada 30.000 Km.",
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 14,
                            ItemMantenimientoId = 14,
                            Kilometros = 30000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 15,
                            ItemMantenimientoId = 15,
                            Kilometros = 20000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 16,
                            InfoExtra = "Colador de la bomba de combustible.",
                            ItemMantenimientoId = 16,
                            Kilometros = 80000,
                            PlanillaId = 1
                        },
                        new
                        {
                            PlanillaItemId = 17,
                            InfoExtra = "Controlar en cada inspección. No requiere sustitución, excepto que haya fuga.",
                            ItemMantenimientoId = 17,
                            Kilometros = 10000,
                            PlanillaId = 1,
                            Recomendaciones = "Gas R134a"
                        },
                        new
                        {
                            PlanillaItemId = 18,
                            InfoExtra = "Cambiar el líquido refrigerante y reparar posibles fugas. Antes de cambiar se recomienda limpiar el sistema de refrigeración.",
                            ItemMantenimientoId = 18,
                            PlanillaId = 1,
                            Recomendaciones = "Inspeccionar el nivel de líquido refrigerante mensualmente."
                        });
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.TipoUnidad", b =>
                {
                    b.Property<int>("TipoUnidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("TipoUnidadId");

                    b.ToTable("TipoUnidad");

                    b.HasData(
                        new
                        {
                            TipoUnidadId = 1,
                            Activo = true,
                            Detalle = "Automóvil"
                        },
                        new
                        {
                            TipoUnidadId = 2,
                            Activo = true,
                            Detalle = "Motocicleta"
                        },
                        new
                        {
                            TipoUnidadId = 3,
                            Activo = true,
                            Detalle = "Vehículo pesado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Modelo", b =>
                {
                    b.HasOne("SistemaMAV.Entities.Models.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaMAV.Entities.Models.TipoUnidad", "TipoUnidad")
                        .WithMany("Modelos")
                        .HasForeignKey("TipoUnidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");

                    b.Navigation("TipoUnidad");
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Planilla", b =>
                {
                    b.HasOne("SistemaMAV.Entities.Models.Modelo", "Modelo")
                        .WithMany("Planillas")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.PlanillaItem", b =>
                {
                    b.HasOne("SistemaMAV.Entities.Models.ItemMantenimiento", "ItemMantenimiento")
                        .WithMany("PlanillaItems")
                        .HasForeignKey("ItemMantenimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaMAV.Entities.Models.Planilla", "Planilla")
                        .WithMany("PlanillaItems")
                        .HasForeignKey("PlanillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMantenimiento");

                    b.Navigation("Planilla");
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.ItemMantenimiento", b =>
                {
                    b.Navigation("PlanillaItems");
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Modelo", b =>
                {
                    b.Navigation("Planillas");
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.Planilla", b =>
                {
                    b.Navigation("PlanillaItems");
                });

            modelBuilder.Entity("SistemaMAV.Entities.Models.TipoUnidad", b =>
                {
                    b.Navigation("Modelos");
                });
#pragma warning restore 612, 618
        }
    }
}
